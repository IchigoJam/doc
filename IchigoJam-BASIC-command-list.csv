rdf:type,schema:identifier,schema:name,schema:category@ja,https://sabae.cc/#priority,schema:name@ja-Kana,https://sabae.cc/#format@ja,schema:description@ja,schema:alternateName,https://sabae.cc/#example
schema:DefiedTerm,1,LED,入出力,,エル・イー・ディー,LED 数,数が1ならLEDが光り、0なら消える,,LED 1
schema:DefiedTerm,2,WAIT,プログラム,,ウェイト,"WAIT 数1{,数2}",数1の数だけ待つ（60で１秒）。マイナスの数を指定すると走査線分で待つ(-261でWAIT1と同じ時間)。省略できる数2に0を指定すると画面表示を止め低電力化して待つ。,,WAIT 60
schema:DefiedTerm,3,:,プログラム,,コロン,:,コマンドを後ろに続けて書くときの区切り記号,,WAIT 60:LED 1
schema:DefiedTerm,4,1,プログラム,,ワン,行番号 {コマンド},1. 数は-32768から32767まで表記できる。 2. 行頭の1〜32767で指定された数は行番号として、コマンドと合わせて記録する。コマンドを省略するとその行を削除（16385以上は指定しないと表示しない）,,10 LED1
schema:DefiedTerm,5,RUN,プログラム,,ラン,RUN,プログラムを実行する [F5],,RUN
schema:DefiedTerm,6,LIST,プログラム,,リスト,"LIST {行番号1{,行番号2}}",プログラムを表示する [F4] （行番号1で1行表示、行番号1がマイナスでその行まで表示、行番号2指定でその行まで表示、行番号2が0の時終わりまで表示、ESCで途中停止）,,"LIST 10,300"
schema:DefiedTerm,7,GOTO,プログラム,,ゴートゥー,GOTO 行番号,指定した行番号へ飛ぶ（式も指定可能）,,GOTO 10
schema:DefiedTerm,8,END,プログラム,,エンド,END,プログラムを終了する,,END
schema:DefiedTerm,9,IF,プログラム,,イフ,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する （THEN,ELSE以降は省略可）",,IF BTN() END
schema:DefiedTerm,10,THEN,プログラム,,ゼン,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する （THEN,ELSE以降は省略可）",,IF BTN() THEN END
schema:DefiedTerm,11,ELSE,プログラム,,エルス,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する （THEN,ELSE以降は省略可）",,IF BTN() END ELSE CONT
schema:DefiedTerm,12,BTN,入出力,,ボタン,BTN({数}),ボタンが押されていれば1、そうでないとき0を返す（数：0(付属ボタン)/UP/DOWN/RIGHT/LEFT/SPACE、省略で0）,,LED BTN()
schema:DefiedTerm,13,NEW,プログラム,,ニュー,NEW,プログラムを全部消す,,NEW
schema:DefiedTerm,14,PRINT,テキスト,,プリント,PRINT {数や文字列},"数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）",?,"PRINT ""HI!"";15"
schema:DefiedTerm,15,?,テキスト,,クエスション,? {数や文字列},"数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）",PRINT,"?""HI!"";15"
schema:DefiedTerm,16,LOCATE,テキスト,,ロケート,"LOCATE 数1,数2{,数3}","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数3が0でなければ指定した場所にカーソルを表示する。",LC,"LOCATE 3,3"
schema:DefiedTerm,17,LC,テキスト,,ロケート,"LC 数1,数2{,数3}","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数3が0でなければ指定した場所にカーソルを表示する。",LOCATE,"LC 3,3"
schema:DefiedTerm,18,CLS,テキスト,,クリア・スクリーン,CLS,画面を全部消す,,CLS
schema:DefiedTerm,19,RND,計算,1,ランダム,RND(数),0から数未満のでたらめな整数を返す,,PRINT RND(6)
schema:DefiedTerm,20,SAVE,ファイル,,セーブ,SAVE {数},プログラムを保存する（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数） ボタンを押した状態で起動すると0番を読み込み自動実行,,SAVE 1
schema:DefiedTerm,21,LOAD,ファイル,,ロード,LOAD {数},プログラムを読み出す（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数）,,LOAD
schema:DefiedTerm,22,FILES,ファイル,,ファイルズ,"FILES {数1{,数2}}",数1(省略可)〜数2のプログラム一覧を表示する（EEPROM内ファイル表示に対応、0指定ですべて表示、ESCで途中停止）,,FILES
schema:DefiedTerm,23,BEEP,サウンド,,ビープ,"BEEP {数1{,数2}}",単音を鳴らす 周期(0-32767)と長さ(1/60秒単位)は省略可 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要,,BEEP
schema:DefiedTerm,24,PLAY,サウンド,,プレイ,"PLAY {""MML""}",MML、記述した音楽を鳴らす。省略で音停止 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要 （MML、CDEFGAB：ドレミファソラシ、R：休符、.：音や休符を1.5倍伸ばす、T120：テンポ、O4：オクターブ(1-6)、N10：単音、<：オクターブ上げる、>：オクターブ下げる、$：繰り返し、'：以後鳴らさない）,,"PLAY ""$CDE2CDE2"""
schema:DefiedTerm,25,TEMPO,サウンド,,テンポ,TEMPO 数,再生中の音楽のテンポを変更する,,TEMPO 1200
schema:DefiedTerm,26,+,計算,5,プラス,数 + 数,足し算する,,PRINT 1+1
schema:DefiedTerm,27,-,計算,5,マイナス,数 - 数,1. 引き算する 2. 後に続く数をマイナスにする,,PRINT 2-1
schema:DefiedTerm,28,*,計算,4,アスタリスク,数 * 数,掛け算する,,PRINT 7*8
schema:DefiedTerm,29,/,計算,4,スラッシュ,数 / 数,割り算する（小数点以下は切り捨て）,,PRINT 9/3
schema:DefiedTerm,30,%,計算,4,パーセント,数 % 数,割り算した余りを返す,,PRINT 10%3
schema:DefiedTerm,31,(),計算,2,ブラケット,(式),カッコ内の式を優先して計算する,,PRINT 1+(1*2)
schema:DefiedTerm,32,LET,計算,9,レット,"LET 変数,数","数をアルファベット１文字の変数や配列の値として記憶する（配列へ連続代入可能 LET[0],1,2）",=,"LET A,1"
schema:DefiedTerm,33,=,計算,9,イコール,変数=数,1. 数をアルファベット１文字の変数や配列の値として記憶する。 2. 式として使うと==と同じ機能となる,LET,A=1
schema:DefiedTerm,34,INPUT,キー入力,,インプット,"INPUT {文字列,}変数",キーボードやUARTからの入力で数値を変数にいれる（文字列とコンマは省略可）,,"INPUT ""ANS?"",A"
schema:DefiedTerm,35,TICK,計算,1,ティック,TICK(),CLTからの時間を返す（1/60秒で1進む）,,PRINT TICK()
schema:DefiedTerm,36,CLT,プログラム,,クリア・ティック,CLT,TICK()のカウントをリセットする,,CLT
schema:DefiedTerm,37,INKEY,キー入力,,インキー,INKEY(),キーボードやUARTから１文字入力する（入力がない時は0、UARTから0が入力された時は#100）,,PRINT INKEY()
schema:DefiedTerm,38,LEFT,キー入力,,レフト,LEFT,28を返す。INKEYのキーコードの判定や、SCROLLに使う,,IF INKEY()=LEFT LED1
schema:DefiedTerm,39,RIGHT,キー入力,,ライト,RIGHT,29を返す。INKEYのキーコードの判定や、SCROLLに使う,,IF INKEY()=RIGHT LED1
schema:DefiedTerm,40,UP,キー入力,,アップ,UP,30を返す。INKEYのキーコードの判定や、SCROLLに使う,,IF INKEY()=UP LED1
schema:DefiedTerm,41,DOWN,キー入力,,ダウン,DOWN,31を返す。INKEYのキーコードの判定や、SCROLLに使う,,IF INKEY()=DOWN LED1
schema:DefiedTerm,42,SPACE,キー入力,,スペース,SPACE,32を返す。INKEYのキーコードの判定や、SCROLLに使う,,IF INKEY()=SPACE LED1
schema:DefiedTerm,43,CHR,テキスト,,キャラクター,"CHR$(数{,数2{,数3…}})",PRINT内で、文字コードに対応する文字を返す（コンマ区切りで連続表記可）,,PRINT CHR$(65)
schema:DefiedTerm,44,ASC,計算,1,アスキー,"ASC(""文字"")",文字に対する文字コードを返す,,"PRINT ASC(""A"")"
schema:DefiedTerm,45,SCROLL,テキスト,,スクロール,SCROLL 数,指定した方向に1キャラ分スクロールする（0/UP:上、1/RIGHT:右、2/DOWN:下、3/LEFT:左）,,SCROLL 2
schema:DefiedTerm,46,SCR,テキスト,,スクリーン,"SCR({数,数})",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）,VPEEK,"PRINT SCR(0,0)"
schema:DefiedTerm,47,VPEEK,テキスト,,ブイ・ピーク,"VPEEK({数,数})",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）,SCR,"PRINT VPEEK(0,0)"
schema:DefiedTerm,48,==,計算,6,イコール・イコール,数 == 数,比較して等しい時に1、それ以外で0を返す。,=,IF A==B LED 1
schema:DefiedTerm,49,!=,計算,6,ノット・イコール・トゥー,数 != 数,比較して等しくない時に1、それ以外で0を返す,<>,IF A!=B LED 1
schema:DefiedTerm,50,<>,計算,6,レス・アンド・グレーター・ザン,数 <> 数,比較して等しくない時に1、それ以外で0を返す,!=,IF A<>B LED 1
schema:DefiedTerm,51,<=,計算,6,レス・ザン・オア・イコール・トゥー,数 <= 数,比較して以下の時に1、それ以外で0を返す,,IF A<=B LED 1
schema:DefiedTerm,52,<,計算,6,レス・ザン,数 < 数,比較して未満の時に1、それ以外で0を返す,,IF A<B LED 1
schema:DefiedTerm,53,>=,計算,6,グレーター・ザン・オア・イコール・トゥー,数 >= 数,比較して以上の時に1、それ以外で0を返す,,IF A>=B LED 1
schema:DefiedTerm,54,>,計算,6,グレーター・ザン,数 > 数,比較してより大きい時に1、それ以外で0を返す,,IF A>B LED 1
schema:DefiedTerm,55,AND,計算,7,アンド,式 AND 式,どちらの式も1の時に1、それ以外で0を返す,&&,IF A=1 AND B=1 LED 1
schema:DefiedTerm,56,&&,計算,7,アンド,式 && 式,どちらの式も1の時に1、それ以外で0を返す,AND,IF A=1 && B=1 LED 1
schema:DefiedTerm,57,OR,計算,8,オア,式 OR 式,どちらかの式が1の時に1、それ以外で0を返す,||,IF A=1 OR B=1 LED 1
schema:DefiedTerm,58,||,計算,8,オア,式 || 式,どちらかの式が1の時に1、それ以外で0を返す,OR,IF A=1 || B=1 LED 1
schema:DefiedTerm,59,NOT,計算,3,ノット,NOT 式,式が0の時に1、それ以外で0を返す,!,IF NOT A=1 LED 1
schema:DefiedTerm,60,!,計算,3,ノット,! 式,式が0の時に1、それ以外で0を返す,NOT,IF !(A=1) LED 1
schema:DefiedTerm,61,REM,プログラム,,リマーク,REM,これ以降のコマンドを実行しない（コメント機能）,',REM START
schema:DefiedTerm,62,',プログラム,,シングル・クォート,',これ以降のコマンドを実行しない（コメント機能）,REM, START
schema:DefiedTerm,63,FOR,プログラム,,フォー,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,,FOR I=0 TO 10:?I:NEXT
schema:DefiedTerm,64,TO,プログラム,,トゥー,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEP省略時は数3は1、6段まで）,,FOR I=0 TO 10:?I:NEXT
schema:DefiedTerm,65,STEP,プログラム,,ステップ,FOR 変数=数1 TO 数2 STEP 数3:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,,FOR I=0 TO 10:?I:NEXT
schema:DefiedTerm,66,NEXT,プログラム,,ネクスト,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,,FOR I=0 TO 10:?I:NEXT
schema:DefiedTerm,67,POS,テキスト,,ポジション,POS({数}),カーソル位置を返す（数、省略時または0:X+Y*幅、1:X座標、2:Y座標） *ver1.4以上,,"?POS(0),POS(1)"
schema:DefiedTerm,68,DRAW,グラフィック,,ドロー,"DRAW 数1,数2{,数3,数4}{,数5}","数1,数2の座標から数3,数4の座標へ線を引く（座標は最大63x47）、数5に0指定で線を消し、2指定で反転する、省略時と1指定で線を引く *ver1.4以上",,"DRAW 1,5,10,15"
schema:DefiedTerm,69,POINT,グラフィック,,ポイント,"POINT(数1,数2)","数1,数2の座標にDRAWで描かれた点または文字があるときに1、そうでないとき0を返す *ver1.4以上",,"?POINT(1,5)"
schema:DefiedTerm,70,OUT,入出力,,アウト,"OUT 数1{,数2}",外部出力OUT1-11に0または1を出力する 数2を省略でまとめて出力できる（数2に-1指定でINへ切り替え、-2指定でプルアップ付きINへ切り替え ※IN3は除く）,,"OUT 1,1"
schema:DefiedTerm,71,IN,入出力,,イン,IN({数}),"IN0-10から入力する（0または1） 数を省略してまとめて入力できる （IN0,1,4,9はプルアップ、IN5-8,10-11はOUTで切り替え時使用可能、IN0,9はボタン）",,"LET A,IN(1)"
schema:DefiedTerm,72,ANA,入出力,,アナログ,ANA({数}),"外部入力の電圧(0V-3.3V)を0-1023の数値で返す(2:IN2、5-8:IN5-8(OUT1-4)、0,9:BTN、省略で0)",,?ANA()
schema:DefiedTerm,73,PWM,入出力,,ピー・ダブリュー・エム,"PWM 数1,数2{,数3}",外部出力OUT2-5に数2で0.01msec単位で指定するパルスを出力する（0-2000、周期20msec）、数3で周期を指定（省略時2000=20msec、マイナス値指定で周期1/480）,,"PWM 2,100"
schema:DefiedTerm,74,CLV,プログラム,,クリア・バリアブル,CLV,変数、配列を全部0にする,CLEAR,CLV
schema:DefiedTerm,75,CLEAR,プログラム,,クリア,CLEAR,変数、配列を全部0にする,CLV,CLEAR
schema:DefiedTerm,76,CLK,キー入力,,クリア・キー,CLK,キーバッファとキーの状態をクリアする,,CLK
schema:DefiedTerm,77,CLO,入出力,,クリア・アウトプット,CLO,入出力ピンを初期状態に戻す,,CLO
schema:DefiedTerm,78,ABS,計算,1,アブソリュート,ABS(数),絶対値を返す（マイナスはプラスになる）,,?ABS(-2)
schema:DefiedTerm,79,[],計算,1,アレイ,[数],"配列（[0]から[101]までの102コの連続した変数として使える） LET[0],1,2,3で連続代入可能",,[3]=1
schema:DefiedTerm,80,GOSUB,プログラム,,ゴーサブ,GOSUB 行番号,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）,GSB,GOSUB 100
schema:DefiedTerm,81,GSB,プログラム,,ゴーサブ,GSB 行番号,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）,GOSUB,GSB 100
schema:DefiedTerm,82,RETURN,プログラム,,リターン,RETURN,GOSUB/GSBの呼び出し元へ戻る,RTN,RETURN
schema:DefiedTerm,83,RTN,プログラム,,リターン,RTN,GOSUB/GSBの呼び出し元へ戻る,RETURN,RTN
schema:DefiedTerm,84,DEC,テキスト,,デシ,"DEC$(数1{,数2})",PRINT内で、数を文字列にする（２番目の数は桁数、省略可）,,"?DEC$(99,3)"
schema:DefiedTerm,85,#,計算,1,ハッシュ,#16進数,16進数で数を表記する,,#FF
schema:DefiedTerm,86,HEX,テキスト,,ヘックス,"HEX$(数1{,数2})",PRINT内で、数を16進数の文字列にする（２番目の数は桁数、省略可）,,"?HEX$(255,2)"
schema:DefiedTerm,87,`,計算,1,バック・クォート,`2進数,2進数で数を表記する,,`1010
schema:DefiedTerm,88,BIN,テキスト,,バイナリー,"BIN$(数1{,数2})",PRINT内で、数を2進数の文字列にする（２番目の数は桁数、省略可）,,"?BIN$(255,8)"
schema:DefiedTerm,89,&,計算,4,アンパサンド,数 & 数,論理積（ビット演算）,,?3&1
schema:DefiedTerm,90,|,計算,5,パイプ,数 | 数,論理和（ビット演算）,,?3|1
schema:DefiedTerm,91,^,計算,4,ハット,数 ^ 数,排他的論理和（ビット演算）,,?A^1
schema:DefiedTerm,92,>>,計算,4,シフト・ライト,数 >> 数,右シフトする（ビット演算）,,?A>>1
schema:DefiedTerm,93,<<,計算,4,シフト・レフト,数 << 数,左シフトする（ビット演算）,,?A<<1
schema:DefiedTerm,94,~,計算,3,チルダ,~数,ビット反転（ビット演算）,,?~A
schema:DefiedTerm,95,COS,計算,1,コサイン,COS(数),指定された数を角度の度数としてコサインの値の256倍を返す *ver1.4以上,,?COS(90)
schema:DefiedTerm,96,SIN,計算,1,サイン,SIN(数),指定された数を角度の度数としてサインの値の256倍を返す *ver1.4以上,,?SIN(90)
schema:DefiedTerm,97,STOP,プログラム,,ストップ,STOP,プログラムを中断する,,STOP
schema:DefiedTerm,98,CONT,プログラム,,コンティニュー,CONT,実行中の行や、中断した行を再度実行する,,CONT
schema:DefiedTerm,99,SOUND,サウンド,,サウンド,SOUND(),音が再生中なら1、そうで無いとき0をを返す,,?SOUND()
schema:DefiedTerm,100,FREE,プログラム,,フリー,FREE(),プログラムの残りメモリ数を返す,,?FREE()
schema:DefiedTerm,101,VER,プログラム,,バージョン,VER(),IchigoJam BASICのバージョン番号を返す,,?VER()
schema:DefiedTerm,102,RENUM,プログラム,,リナンバー,"RENUM {数1{,数2}}",プログラムの行番号を数1(省略時は10)から数2(省略時は10)刻みにする。GOTO/GOSUBの飛び先は手で変更必要な場合がある,,RENUM
schema:DefiedTerm,103,LRUN,ファイル,,ロードラン,LRUN {数},プログラムを読み込み後、実行する,,LRUN 1
schema:DefiedTerm,104,FILE,ファイル,,ファイル,FILE(),最後にプログラムを読み込み、書き込み行った数を返す,,?FILE()
schema:DefiedTerm,105,LINE,プログラム,,ライン,LINE(),現在実行中の行番号を返す（非実行時は0）,,?LINE()
schema:DefiedTerm,106,SRND,プログラム,,エス・ランダム,SRND 数,種を指定して乱数を初期化する,,SRND 0
schema:DefiedTerm,107,HELP,メモリ,,ヘルプ,HELP,メモリマップを表示する,,HELP
schema:DefiedTerm,108,PEEK,メモリ,,ピーク,PEEK(数),メモリ読み出し（キャラクターパターン0-#7FFなど）,,?PEEK(#700)
schema:DefiedTerm,109,POKE,メモリ,,ポーク,"POKE 数,数","メモリへの書き込み（連続書き込み可能 POKE#700,1,2,3）",,"POKE #700,#FF"
schema:DefiedTerm,110,COPY,メモリ,,コピー,"COPY 数1,数2,数3",メモリコピー 数1のアドレスへ数2のアドレスから数3の長さ分コピー(数3マイナスでコピー方向が逆になる),,"COPY #900,0,256"
schema:DefiedTerm,111,CLP,メモリ,,クリア・パターン,CLP,キャラクターパターン(#700-#7FF)を初期化する,,CLP
schema:DefiedTerm,112,"""",テキスト,,ダブル・クォート,"""文字列""",文字列の先頭アドレスを返す,,"A=""ABC"""
schema:DefiedTerm,113,STR,テキスト,,ストリング,"STR$(数1{,数2})",PRINT内で、文字列を返す（数2(省略可)で長さ指定）,,PRINT STR$(A)
schema:DefiedTerm,114,LEN,テキスト,,レングス,"LEN(""文字列"")",文字列の長さを返す,,"PRINT LEN(""ABC"")"
schema:DefiedTerm,115,@,プログラム,,アット・マーク,@ラベル,行の先頭に書くとラベルとなり、行番号の代わりとして使える（GOTO @LOOPなど） ※前方一致,,@LOOP
schema:DefiedTerm,116,VIDEO,テキスト,,ビデオ,"VIDEO 数1{,数2}",画面表示非表示を切り替える 0で画面表示を停止し処理高速化 （F8で表示）、省略可能な数2でVIDEO0時CPUクロックを1/数2に変更し省電力化、数1が2の倍数で白黒反転、数1が3以上で拡大モード,,VIDEO 0
schema:DefiedTerm,117,RESET,プログラム,,リセット,RESET,IchigoJamをリセットする,,RESET
schema:DefiedTerm,118,SLEEP,プログラム,,スリープ,SLEEP,プログラムを休止する (ボタンを押すと起動し、LRUN0を実行する),,SLEEP
schema:DefiedTerm,119,UART,入出力,,ユー・アート,"UART 数1{,数2}",数1：シリアル出力設定（0:オフ、1:PRINTのみ、2:PRINT/LC/CLS/SCROLL、3:PRINTのみ/改行コード\r\n、左記に+4で入力エコーバック、初期値:2）、数2：シリアル受信設定（0:オフ、1:オン 省略時）,,UART 0
schema:DefiedTerm,121,BPS,入出力,,ビー・ピー・エス,"BPS 数1{,数2}","シリアル通信速度を変更する(0で初期値の115,200bps、-1:57600bps、-2:38400bps、-100以下指定で指定した数の-100倍bpsに指定、-2304:230400bps)。数2でI2Cの通信速度設定（単位kHz、0:デフォルト400kHz)",,BPS 9600
schema:DefiedTerm,120,OK,プログラム,,オーケー,OK {数},OKやエラーメッセージの表示有無を切り替える（数、1:表示、2:非表示、省略で1）,,OK 2
schema:DefiedTerm,121,I2CR,入出力,,アイ・ツー・シー・リード,"I2CR(数1,数2,数3,数4,数5)",I2Cで周辺機器から読み込む I2Cアドレス、コマンド送信アドレス・長さ、受信アドレスと長さ（コマンド送信が1byteの時数3を省略可、コマンド送信が0byteの時数2/数3を省略可）,,"R=I2CR(#50,#114A,2,#114C,2)"
schema:DefiedTerm,122,I2CW,入出力,,アイ・ツー・シー・ライト,"I2CW(数1,数2,数3,数4,数5)",I2Cで周辺機器に書き込む I2Cアドレス、コマンド送信アドレス・長さ、送信アドレスと長さ（数4/数5は省略可、コマンド送信が1byteの時数3を省略可）,,"R=I2CW(#50,#114A,2,#114C,2)"
schema:DefiedTerm,123,IOT.IN,入出力,,アイ・オー・ティー・イン,IoT.IN(),sakura.ioモジュールから受信した数を一つ読み込む,,R=IoT.IN()
schema:DefiedTerm,124,IOT.OUT,入出力,,アイ・オー・ティー・アウト,IoT.OUT 数,sakura.ioモジュールへ数をチャンネル0で即時送信する,,IoT.OUT 100
schema:DefiedTerm,125,WS.LED,入出力,,ダブリュー・エス・エル・イー・ディー,"WS.LED 数1{,数2}",配列の先頭から緑赤青の順に設定された値でOUT1に接続されたWS2812Bを数1の分光らせる。数2を指定するとその数だけ繰り返す。 *ver1.4以上,,WS.LED 3
schema:DefiedTerm,126,SWITCH,入出力,,スイッチ,"SWITCH {数1{,数2}}",画面表示をテレビと液晶とを切り替える（数1 0:テレビ、1:液晶）、数2で液晶の濃さを指定,,SWITCH
schema:DefiedTerm,127,USR,プログラム,,ユーザー,"USR(数1{,数2})",数1で指定されたアドレスのマシン語を数2をパラメータとして呼び出す（数2省略で0）,,"A=USR(#700,0)"